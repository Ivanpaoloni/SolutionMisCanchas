@model IQueryable<MisCanchas.Domain.Entities.Turn>

@{
    ViewData["Title"] = "Turnos";
}

<h1><i class="bi bi-calendar-week-fill"></i> Turnos - @ViewBag.FieldName</h1>
<hr />
<a class="btn btn-success" asp-area="" asp-controller="Turns" asp-action="Add" asp-route-date="@DateTime.Today"><i class="bi bi-calendar-plus-fill"></i> Nuevo Turno</a>
<br />
<br />
<div id="calendar1"></div>
<br />

@*
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirmar Cancelación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <form id="deleteTurnoForm">
                    <input type="hidden" id="turnoId" name="TurnoId" value="" />
                    <p>¿Estás seguro de que deseas eliminar este turno?</p>
                </form>
            </div>
            <div class="modal-footer">
                <form action="@Url.Action("EliminarTurno", "TuControlador", new { id = Model.TurnoId })" method="post">
                    @Html.HttpMethodOverride(HttpVerbs.Delete)
                    <button type="submit" class="btn btn-danger">Eliminar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                </form>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary">Confirmar</button>
            </div>
        </div>
    </div>
</div>
*@


@section Scripts {
    <script src="~/lib/fullcalendar/main.min.js"></script>
@* script de modal
    <script>
        var myModal = document.getElementById('exampleModal')
        var myInput = document.getElementById('myInput')

        myModal.addEventListener('shown.bs.modal', function () {
            myInput.focus()
        })
    </script>*@

    <script >
        document.addEventListener("DOMContentLoaded", function(){
            const calendarEl = document.getElementById('calendar1');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                slotDuration: '01:00',
                slotLabelInterval: '01:00',
                contentHeight: 'auto',
                height: 'parent',
                themeSystem: 'bootstrap5',
                initialView: 'timeGridWeek',
                locale: 'es',
                events: '/turns/GetTurnsCalendar',
                eventColor: '#198754', // Color predeterminado para todos los eventos en el calendario
                eventBackgroundColor: '#198754', // Color de fondo predeterminado para todos los eventos en el calendario
                dateClick: async function(info){
                    await getSingleTurnByDate(info.dateStr);
                    console.log(info.dateStr);
                },
                eventClick: async function (info) {
                    await viewTurnById(info.event.id);
                    console.log(info.event.id);
                },
                slotMinTime: '08:00',
                slotMaxTime: '27:00',
                headerToolbar: {
                    left: 'prev,next,today',
                    center: 'title',
                    right: 'timeGridWeek,timeGridDay',
                    close: 'fa-times',
                    prev: 'fa-chevron-left',
                    next: 'fa-chevron-right'
                }
            })
            calendar.render();
            
            // Obtener los nuevos horarios mediante fetch y actualizar el calendario
            fetch("/Turns/GetTimeRange")
                .then(response => response.json())
                .then(data => {
                    // Obtener los nuevos valores de slotMinTime y slotMaxTime
                    var slotMaxTime = data.slotMaxTime;
                    var slotMinTime = data.slotMinTime;

                    // Actualizar los valores en el calendario
                    calendar.setOption('slotMinTime', slotMinTime);
                    calendar.setOption('slotMaxTime', slotMaxTime);
                });
        });

        async function getSingleTurnByDate(dateTime){
            const dateTime1 = dateTime;
            const response = await fetch(`/Turns/GetSingleTurnByDate?dateTime=${dateTime1}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const json = await response.json();
            console.log(json);
            window.location.href = `/Turns/Add?dateTime=${dateTime1}`;
        }

        async function viewTurnById(id){
            window.location.href = `/Turns/View?id=${id}`;
        }

        


    </script>

}
